# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vPEcSVXInDl5YWNLgWsFSSHR_eCPWYk3
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime
!pip install yfinance
import yfinance as yf
import pandas_datareader.data as pdr

def computeRSI (data, time_window):
    diff = data.diff(1).dropna()       
    up_chg = 0 * diff
    down_chg = 0 * diff
    
    #positive changes
    up_chg[diff > 0] = diff[ diff>0 ]
    
    #negetive changes
    down_chg[diff < 0] = diff[ diff < 0 ]
    
    
    up_chg_avg   = up_chg.ewm(com=time_window-1 , min_periods=time_window).mean()
    down_chg_avg = down_chg.ewm(com=time_window-1 , min_periods=time_window).mean()
    
    rs = abs(up_chg_avg/down_chg_avg)
    rsi = 100 - 100/(1+rs)#rsi formula
    return rsi

def plot(x):
  yf.pdr_override()
  endtime=datetime.now()
  ticker=x#facebook
  start = datetime.strptime('2011-01-01', '%Y-%m-%d')#starting date 
  #end = datetime.strptime('2020-01-01', '%Y-%m-%d')#ending date

  data = pdr.get_data_yahoo(ticker,start,endtime)
  ticker_df = data
  ticker_df = ticker_df.reset_index()
  df = ticker_df
  df['RSI'] = computeRSI(df['Adj Close'], 14)
  plt.figure(figsize=(20,5))
  plt.plot(df['Date'], df['Adj Close'])
  plt.title(x+' Stock price chart')
  plt.show()

#RSI indicator a momentum indicator used in technical analysis that measures the magnitude of recent price changes to evaluate overbought or oversold conditions in the price of a stock
#Traditionally RSI above 70 indicates the stock is over brought, while less than 30 indicates it is over sold
#RSI indicator is one of the important sentiment indicators which reflects sentiment as levels that are either overbought or oversold
# plot correspondingRSI values and significant levels
  plt.figure(figsize=(15,5))
  plt.title('RSI indicator from 2011-01-01  ')
  plt.plot(df['Date'], df['RSI'])

  plt.axhline(0, linestyle='--', alpha=0.1)
  plt.axhline(20, linestyle='--', alpha=0.5)
  plt.axhline(30, linestyle='--',color='red')

  plt.axhline(70, linestyle='--',alpha=1,color='green')
  plt.axhline(80, linestyle='--', alpha=0.5)
  plt.axhline(100, linestyle='--', alpha=0.1)
  plt.show()
print('Please eneter correct value')
x=input()
plot(x)

